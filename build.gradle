// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    ext.kotlin_version = '1.1.1'
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.13'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}
subprojects {
    if (!name.contains('sample')) {
        apply plugin: 'jacoco'
        apply plugin: 'com.android.library'
        apply from: '../publish.gradle'

        android {
            compileSdkVersion 25
            buildToolsVersion "25.0.2"

            defaultConfig {
                minSdkVersion 9
                targetSdkVersion 25
            }
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
                debug {
                    testCoverageEnabled true
                }
            }
            testOptions {
                unitTests.all {
                    jacoco {
                        includeNoLocationClasses = true
                    }
                }
            }
        }

        dependencies {
            compile fileTree(include: ['*.jar'], dir: 'libs')
            compile 'io.reactivex:rxjava:1.2.9'
            compile 'io.reactivex:rxandroid:1.2.1'
            compile 'com.android.support:support-annotations:25.3.1'

            testCompile 'junit:junit:4.12'
            testCompile 'org.robolectric:robolectric:3.3.2'
            testCompile 'org.mockito:mockito-core:2.7.21'
        }

        task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports"

            classDirectories = fileTree(
                    dir: "${project.buildDir}/intermediates/classes",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/*$ViewInjector*.*',
                               '**/BuildConfig.*',
                               '**/Manifest*.*']
            )

            additionalSourceDirs = files(project.android.sourceSets.main.java.srcDirs)
            sourceDirectories = files(project.android.sourceSets.main.java.srcDirs)
            executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")

            reports {
                xml.enabled = true
                html.enabled = true
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def validSubprojects = subprojects.findAll {
    !it.name.contains('sample')
}

apply plugin: 'jacoco'
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports', description: 'Generates an aggregate report from all subprojects') {
    dependsOn = validSubprojects.jacocoTestReport

    classDirectories = files(validSubprojects.jacocoTestReport.classDirectories)
    additionalSourceDirs = files(validSubprojects.jacocoTestReport.additionalSourceDirs)
    sourceDirectories = files(validSubprojects.jacocoTestReport.additionalSourceDirs)
    executionData = files(validSubprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

apply plugin: 'com.github.kt3k.coveralls'
coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    sourceDirs = validSubprojects.android.sourceSets.main.java.srcDirs.flatten()
}
